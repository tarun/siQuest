package edu.villanova.siquest.ui;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import org.apache.log4j.Logger;

import java.io.IOException;
import java.io.File;
import java.util.ArrayList;

import edu.villanova.siquest.SqAnalyzers;
import edu.villanova.siquest.SqDocument;
import edu.villanova.siquest.SqDocumentResult;
import edu.villanova.siquest.SqFields;
import edu.villanova.siquest.SqIndexer;
import edu.villanova.siquest.SqInfoExtractor;
import edu.villanova.siquest.SqPreferences;
import edu.villanova.siquest.SqSearcher;
import edu.villanova.siquest.SqTerm;
import edu.villanova.siquest.SqTermOffset;

public class Main extends javax.swing.JFrame {

	static Logger logger = Logger.getLogger(Main.class);

    SqPreferences prefs;
    /** Creates new form Main */
    public Main() {

        prefs = SqPreferences.getInstance();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Results");
        root.add(new DefaultMutableTreeNode("No Search Results"));
        DefaultTreeModel treeModel = new DefaultTreeModel(root);

        jTree1.setModel(treeModel);
        fieldsComboBox1 = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        analyzerComboBox = new javax.swing.JComboBox();
        analyzeButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        DefaultMutableTreeNode root2 = new DefaultMutableTreeNode("Terms");
        DefaultTreeModel treeModel2 = new DefaultTreeModel(root);

        jTree2.setModel(treeModel2);
        getFieldsButton = new javax.swing.JButton();
        fieldsComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        tTopTermsComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        diFileTextField = new javax.swing.JTextField();
        diBrowseButton = new javax.swing.JButton();
        diGetButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        diDocumentTree = new javax.swing.JTree();
        DefaultMutableTreeNode root3 = new DefaultMutableTreeNode("Document");
        root3.add(new DefaultMutableTreeNode("No Document Selected"));
        DefaultTreeModel treeModel3 = new DefaultTreeModel(root3);

        diDocumentTree.setModel(treeModel3);
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar6 = new javax.swing.JMenuBar();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        PrefsMenuItem = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        indexMenuItem = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SiQuest");

        jPanel1.setName("searchPanel"); // NOI18N

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);

        fieldsComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Content", "Path", "Last Modified"}));

        jLabel10.setText("Field");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(fieldsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Search", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel2.setText("Text to analyze:");

        analyzerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Simple", "Snowball", "Standard", "Stop", "Whitespace"}));
        analyzerComboBox.setSelectedIndex(2);

        analyzeButton.setText("Analyze");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jLabel3.setText("Analyzed Text:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(analyzerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analyzeButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(analyzerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyzeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Analyze Text", jPanel4);

        jLabel4.setText("File:");

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Analyze");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jScrollPane5.setViewportView(jTextArea3);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Simple", "Snowball", "Standard", "Stop", "Whitespace"}));
        jComboBox1.setSelectedIndex(2);

        jLabel5.setText("Analyzer");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(27, 27, 27)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Analyze Document", jPanel5);

        jScrollPane2.setViewportView(jTree2);

        getFieldsButton.setText("Get");
        getFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getFieldsButtonActionPerformed(evt);
            }
        });

        fieldsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All", "Content", "Last Modified", "Path"}));

        jLabel1.setText("Field");

        tTopTermsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"10","25","50","100","All"}));

        jLabel9.setText("Top");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tTopTermsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getFieldsButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fieldsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tTopTermsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getFieldsButton)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Terms", jPanel3);

        jLabel8.setText("File:");

        diBrowseButton.setText("Browse");
        diBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diBrowseButtonActionPerformed(evt);
            }
        });

        diGetButton.setText("Get");
        diGetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diGetButtonActionPerformed(evt);
            }
        });

        jScrollPane6.setViewportView(diDocumentTree);

        jButton4.setText("Add");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(diBrowseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diGetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diBrowseButton)
                    .addComponent(diGetButton)
                    .addComponent(jLabel8)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Document", jPanel2);

        jLabel6.setText("Documents Indexed:");

        jLabel7.setText("0");

        jMenu11.setText("File");

        jMenuItem19.setText("Exit");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit(evt);
            }
        });
        jMenu11.add(jMenuItem19);

        jMenuBar6.add(jMenu11);

        jMenu1.setText("Configure");

        PrefsMenuItem.setText("Preferences");
        PrefsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrefsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(PrefsMenuItem);

        jMenuBar6.add(jMenu1);

        jMenu12.setText("Tools");

        indexMenuItem.setText("Index");
        indexMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexMenuItemActionPerformed(evt);
            }
        });
        jMenu12.add(indexMenuItem);

        jMenuItem21.setText("Optimize");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optimzeMenuItemActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem21);

        jMenuBar6.add(jMenu12);

        setJMenuBar(jMenuBar6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addGap(11, 11, 11))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Search");
        SqInfoExtractor extractor = new SqInfoExtractor(prefs.getIndexDir(), prefs.getAnalyzerName());

        try
        {
            jLabel7.setText(Integer.toString(extractor.getNumIndexDocs()));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

        getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

  if(jTextField1.getText().trim().length() > 0)
  {
    String field = null;

    if(fieldsComboBox1.getSelectedIndex() == 0)
    {
      field = SqFields.CONTENT_FIELD;
    }
    else if(fieldsComboBox1.getSelectedIndex() == 1)
    {
       field = SqFields.PATH_FIELD;
    }
    else if(fieldsComboBox1.getSelectedIndex() == 2)
    {
       field = SqFields.LAST_MODIFIED;
    }

    try
    {
      DefaultMutableTreeNode root = new DefaultMutableTreeNode("Results");
      DefaultTreeModel treeModel = new DefaultTreeModel(root);
      jTree1.setModel(treeModel);

      SqSearcher searcher = new SqSearcher(prefs.getIndexDir(), prefs.getAnalyzerName());

      ArrayList<String> tokens = searcher.analyzeText(prefs.getAnalyzerName(), prefs.getStopWords(), jTextField1.getText());

      ArrayList<SqDocumentResult> results = searcher.search(jTextField1.getText(), field);

      for(SqDocumentResult result : results)
      {
        SqDocument document = result.getDocument();

        File currentFile = new File(document.getPath());

        DefaultMutableTreeNode child = new DefaultMutableTreeNode(currentFile.getName());
        child.add(new DefaultMutableTreeNode("Index ID: " + document.getDocId()));
        child.add(new DefaultMutableTreeNode("Rank: " + result.getRank()));
        child.add(new DefaultMutableTreeNode("Path: " + document.getPath()));
        child.add(new DefaultMutableTreeNode("Last Modified: " + document.getLastModified()));

        DefaultMutableTreeNode child2 = new DefaultMutableTreeNode("Terms");

        for(String token : tokens)
        {
          SqTerm term = document.getTerm(token);

          if(term != null)
          {
            DefaultMutableTreeNode child3 = new DefaultMutableTreeNode(term.getText());

            child3.add(new DefaultMutableTreeNode("Freq: " + term.getFreq()));

            String termOffsets = "";

            for(SqTermOffset to : document.getTermOffsets(term.getText()))
            {
              termOffsets += "[" + to.getStartOffset() + "," + to.getEndOffset() + "],";
            }

            if(termOffsets.lastIndexOf(",") == termOffsets.length() -1)
            {
              termOffsets = termOffsets.substring(0, termOffsets.length() - 1);
            }

            child3.add(new DefaultMutableTreeNode("Offsets: " + termOffsets));


            child2.add(child3);
          }
        }

        child.add(child2);
        root.add(child);
        jTree1.updateUI();
      }

      if(results.size() < 1)
      {
        DefaultMutableTreeNode child = new DefaultMutableTreeNode("No Results Found");
        root.add(child);
        jTree1.updateUI();
      }
    }
    catch(Exception e)
    {
    	logger.error("Error occurred in button1 action", e);
    }
  }
}//GEN-LAST:event_jButton1ActionPerformed

private void exit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit
    System.exit(0);
}//GEN-LAST:event_exit

private void getFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getFieldsButtonActionPerformed

    try
    {
      DefaultMutableTreeNode root = new DefaultMutableTreeNode("Terms");
      DefaultTreeModel treeModel = new DefaultTreeModel(root);
      jTree2.setModel(treeModel);

      SqInfoExtractor extractor = new SqInfoExtractor(prefs.getIndexDir(), prefs.getAnalyzerName());

      ArrayList<SqTerm> terms = null;

      if(fieldsComboBox.getSelectedIndex() > 0)
      {
        String field = null;

        if(fieldsComboBox.getSelectedIndex() == 1)
        {
          field = SqFields.CONTENT_FIELD;
        }
        else if(fieldsComboBox.getSelectedIndex() == 2)
        {
           field = SqFields.LAST_MODIFIED;
        }
        else if(fieldsComboBox.getSelectedIndex() == 3)
        {
           field = SqFields.PATH_FIELD;
        }

        if(tTopTermsComboBox.getSelectedIndex() == 4)
        {
          terms = extractor.getIndexedTerms(field);
        }
        else
        {
          terms = extractor.getHighFreqTerms(Integer.parseInt(tTopTermsComboBox.getSelectedItem().toString()), field);
        }
      }
      else
      {
        if(tTopTermsComboBox.getSelectedIndex() == 4)
        {
          terms = extractor.getIndexedTerms();
        }
        else
        {
          terms = extractor.getHighFreqTerms(Integer.parseInt(tTopTermsComboBox.getSelectedItem().toString()), null);
        }
      }

      for(SqTerm term : terms)
      {
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(term.getText());

        child.add(new DefaultMutableTreeNode("Field: " + term.getField()));
        child.add(new DefaultMutableTreeNode("Freq: " + term.getFreq()));

        root.add(child);
      }

      DefaultTreeModel treeModel2 = new DefaultTreeModel(root);

      jTree2.setModel(treeModel2);
    }
    catch(Exception e)
    {
    	logger.error("Error occurred in get fields button action", e);
    }
}//GEN-LAST:event_getFieldsButtonActionPerformed

private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed

    try
    {
    String analyzer = "";

    if(analyzerComboBox.getSelectedItem().toString().equalsIgnoreCase(SqAnalyzers.WHITE_SPACE_ANALYZER))
        {
          analyzer = SqAnalyzers.WHITE_SPACE_ANALYZER;
        }
        else if(analyzerComboBox.getSelectedItem().toString().equalsIgnoreCase(SqAnalyzers.SIMPLE_ANALYZER))
        {
          analyzer = SqAnalyzers.SIMPLE_ANALYZER;
        }
        else if(analyzerComboBox.getSelectedItem().toString().equalsIgnoreCase(SqAnalyzers.STOP_ANALYZER))
        {
          analyzer = SqAnalyzers.STOP_ANALYZER;
        }
        else if(analyzerComboBox.getSelectedItem().toString().equalsIgnoreCase(SqAnalyzers.SNOWBALL))
        {
          analyzer = SqAnalyzers.SNOWBALL;
        }
        else
        {
          analyzer = SqAnalyzers.STANDARD_ANALYZER;
        }

      SqSearcher searcher = new SqSearcher(prefs.getIndexDir(), prefs.getAnalyzerName());

      ArrayList<String> tokens = searcher.analyzeText(analyzer, null, jTextArea1.getText());

      jTextArea2.setText("");
      for(String token : tokens)
      {
        jTextArea2.setText(jTextArea2.getText() + token.trim() + " ");
      }
    }
    catch(Exception e)
    {
      logger.error("Error occurred in analyze button action", e);
    }
}//GEN-LAST:event_analyzeButtonActionPerformed

private void indexMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexMenuItemActionPerformed
  IndexDialog dialog = new IndexDialog(this, true);
  
  dialog.setVisible(true);

  SqInfoExtractor extractor = new SqInfoExtractor(prefs.getIndexDir(), prefs.getAnalyzerName());

  try
  {
    jLabel7.setText(Integer.toString(extractor.getNumIndexDocs()));
  }
  catch(Exception e)
  {
     logger.error("Error occurred in analyze button action", e);
  }

}//GEN-LAST:event_indexMenuItemActionPerformed

private void PrefsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrefsMenuItemActionPerformed
  PrefsDialog dialog = new PrefsDialog(this, true);
  dialog.setVisible(true);
}//GEN-LAST:event_PrefsMenuItemActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

  javax.swing.JFileChooser chooser = null;

  if(jTextField2.getText().length() > 0)
  {
    File parentDir = new File(jTextField2.getText());
    
    chooser = new javax.swing.JFileChooser(parentDir);
  }
  else
  {
    chooser = new javax.swing.JFileChooser();
  }

  chooser.addChoosableFileFilter(new FileChooserFilter());

  int returnVal = chooser.showOpenDialog(this);

  if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION)
  {
    jTextField2.setText(chooser.getSelectedFile().getPath());
  }
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
try
    {
    String analyzer = "";

        if(jComboBox1.getSelectedIndex() == 0)
        {
          analyzer = SqAnalyzers.SIMPLE_ANALYZER;
        }
        else if(jComboBox1.getSelectedIndex() == 1)
        {
          analyzer = SqAnalyzers.SNOWBALL;
        }
        else if(jComboBox1.getSelectedIndex() == 2)
        {
          analyzer = SqAnalyzers.STANDARD_ANALYZER;
        }
        else if(jComboBox1.getSelectedIndex() == 3)
        {
          analyzer = SqAnalyzers.STOP_ANALYZER;
        }
        else if(jComboBox1.getSelectedIndex() == 4)
        {
          analyzer = SqAnalyzers.WHITE_SPACE_ANALYZER;
        }

     SqSearcher searcher = new SqSearcher(prefs.getIndexDir(), prefs.getAnalyzerName());

      ArrayList<String> tokens = searcher.analyzeDocument(analyzer, null, new File(jTextField2.getText()));

      jTextArea3.setText("");

      for(String token : tokens)
      {
        jTextArea3.setText(jTextArea3.getText() + token.trim() + " ");
      }
    }
    catch(Exception e)
    {
    	logger.error("Error occurred in button3 action", e);
    }
}//GEN-LAST:event_jButton3ActionPerformed

private void optimzeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optimzeMenuItemActionPerformed
    SqIndexer indexer = new SqIndexer(prefs.getIndexDir(), prefs.getAnalyzerName());

    try
    {
      indexer.optimizeIndex();
      javax.swing.JOptionPane.showMessageDialog(this, "Index Optimzed.");
    }
    catch(IOException e)
    {
      logger.error("Error occurred in optimize index action", e);
    }
}//GEN-LAST:event_optimzeMenuItemActionPerformed

private void diBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diBrowseButtonActionPerformed

  javax.swing.JFileChooser chooser = null;

  if(diFileTextField.getText().length() > 0)
  {
    File parentDir = new File(diFileTextField.getText());

    chooser = new javax.swing.JFileChooser(parentDir);
  }
  else
  {
    chooser = new javax.swing.JFileChooser();
  }

  chooser.addChoosableFileFilter(new FileChooserFilter());

  int returnVal = chooser.showOpenDialog(this);

  if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION)
  {
    diFileTextField.setText(chooser.getSelectedFile().getPath());
  }
}//GEN-LAST:event_diBrowseButtonActionPerformed

private void diGetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diGetButtonActionPerformed
   
  if(diFileTextField.getText().trim().length() > 0)
  {
    try
    {
      DefaultMutableTreeNode root = new DefaultMutableTreeNode("Document");
      DefaultTreeModel treeModel = new DefaultTreeModel(root);
      diDocumentTree.setModel(treeModel);

      SqInfoExtractor extractor = new SqInfoExtractor(prefs.getIndexDir(), prefs.getAnalyzerName());

      SqDocument document = extractor.getDocument(diFileTextField.getText());

      if(document != null)
      {
        File currentFile = new File(document.getPath());

        DefaultMutableTreeNode child = new DefaultMutableTreeNode(currentFile.getName());
        child.add(new DefaultMutableTreeNode("Index ID: " + document.getDocId()));
        child.add(new DefaultMutableTreeNode("Path: " + document.getPath()));
        child.add(new DefaultMutableTreeNode("Last Modified: " + document.getLastModified()));

        DefaultMutableTreeNode child2 = new DefaultMutableTreeNode("Terms");

        for(SqTerm term : document.getTerms())
        {
          DefaultMutableTreeNode child3 = new DefaultMutableTreeNode(term.getText());

          child3.add(new DefaultMutableTreeNode("Freq: " + term.getFreq()));

          String termOffsets = "";

          for(SqTermOffset to : document.getTermOffsets(term.getText()))
          {
            termOffsets += "[" + to.getStartOffset() + "," + to.getEndOffset() + "],";
          }

          if(termOffsets.lastIndexOf(",") == termOffsets.length() -1)
          {
            termOffsets = termOffsets.substring(0, termOffsets.length() - 1);
          }

          child3.add(new DefaultMutableTreeNode("Offsets: " + termOffsets));

          child2.add(child3);
        }

        child.add(child2);
        root.add(child);
        diDocumentTree.updateUI();
      }
      else
      {
        DefaultMutableTreeNode child = new DefaultMutableTreeNode("Document not Found");
        root.add(child);
        diDocumentTree.updateUI();
      }
    }
    catch(Exception e)
    {
      logger.error("Error occurred in document get button action", e);
    }
  }
}//GEN-LAST:event_diGetButtonActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

  if(diFileTextField.getText().trim().length() > 0)
  {
    File fileToBeAdded = new File(diFileTextField.getText());

    if(fileToBeAdded.exists() && fileToBeAdded.isFile())
    {
      SqIndexer indexer = new SqIndexer(prefs.getIndexDir(), prefs.getAnalyzerName());
      SqInfoExtractor extractor = new SqInfoExtractor(prefs.getIndexDir(), prefs.getAnalyzerName());

      if(extractor.docExists(diFileTextField.getText()))
      {
        int result = javax.swing.JOptionPane.showConfirmDialog(this, "File exists. Re-index?","Confirm", javax.swing.JOptionPane.YES_NO_OPTION);

        if(result == 0)
        {
          try
          {
            indexer.deleteDocument(extractor.getDocId(diFileTextField.getText()));
            indexer.indexDocument(diFileTextField.getText());
            jLabel7.setText(Integer.toString(extractor.getNumIndexDocs()));
            javax.swing.JOptionPane.showMessageDialog(this, "File added.");
          }
          catch(IOException e)
          {
            logger.error("Error re-indexing document.", e);
            javax.swing.JOptionPane.showMessageDialog(this, "An error occured while indexing the file.  Please check log.");
          }
        }
      }
      else
      {
        try
        {
          indexer.indexDocument(diFileTextField.getText());
          jLabel7.setText(Integer.toString(extractor.getNumIndexDocs()));
          javax.swing.JOptionPane.showMessageDialog(this, "File added.");
        }
        catch(IOException e)
        {
          logger.error("Error indexing document.", e);
          javax.swing.JOptionPane.showMessageDialog(this, "An error occured while indexing the file.  Please check log.");
        }
      }
    }
    else
    {
      javax.swing.JOptionPane.showMessageDialog(this, "File does not exist on the file system.");
    }
  }
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

  if(diFileTextField.getText().trim().length() > 0)
  {
    File fileToBeAdded = new File(diFileTextField.getText());

    if(fileToBeAdded.exists() && fileToBeAdded.isFile())
    {
      SqIndexer indexer = new SqIndexer(prefs.getIndexDir(), prefs.getAnalyzerName());
      SqInfoExtractor extractor = new SqInfoExtractor(prefs.getIndexDir(), prefs.getAnalyzerName());

      if(extractor.docExists(diFileTextField.getText()))
      {
        int result = javax.swing.JOptionPane.showConfirmDialog(this, "Delete file?","Confirm", javax.swing.JOptionPane.YES_NO_OPTION);

        if(result == 0)
        {
          try
          {
            indexer.deleteDocument(extractor.getDocId(diFileTextField.getText()));
            jLabel7.setText(Integer.toString(extractor.getNumIndexDocs()));
            javax.swing.JOptionPane.showMessageDialog(this, "File deleted.");
          }
          catch(IOException e)
          {
            logger.error("Error deleting document.", e);
          }
        }
      }
      else
      {
        javax.swing.JOptionPane.showMessageDialog(this, "File does not exist.");
      }
    }
    else
    {
      javax.swing.JOptionPane.showMessageDialog(this, "File does not exist on the file system.");
    }
  }
}//GEN-LAST:event_jButton5ActionPerformed

  /**
  * @param args the command line arguments
  */
  public static void main(String args[])
  {
    SqPreferences prefs = SqPreferences.getInstance();

    SqIndexer indexer = new SqIndexer(prefs.getIndexDir(), prefs.getAnalyzerName());

    if(!indexer.indexExist())
    {
      try
      {
        indexer.createIndex();
      }
      catch(Exception e)
      {
        logger.error("Error creating initial index", e);
      }
    }
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new Main().setVisible(true);
      }
    });
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem PrefsMenuItem;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JComboBox analyzerComboBox;
    private javax.swing.JButton diBrowseButton;
    private javax.swing.JTree diDocumentTree;
    private javax.swing.JTextField diFileTextField;
    private javax.swing.JButton diGetButton;
    private javax.swing.JComboBox fieldsComboBox;
    private javax.swing.JComboBox fieldsComboBox1;
    private javax.swing.JButton getFieldsButton;
    private javax.swing.JMenuItem indexMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenuBar jMenuBar6;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTree jTree1;
    private javax.swing.JTree jTree2;
    private javax.swing.JComboBox tTopTermsComboBox;
    // End of variables declaration//GEN-END:variables

}
